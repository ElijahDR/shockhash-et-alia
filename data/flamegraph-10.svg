<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>memcpy@plt (441,513,132 samples, 0.04%)</title><rect x="700.6" y="101" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="703.58" y="111.5" ></text>
</g>
<g >
<title>_mcount (8,070,298,890 samples, 0.79%)</title><rect x="557.0" y="85" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="560.03" y="95.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (846,331,914 samples, 0.08%)</title><rect x="1114.2" y="181" width="1.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1117.22" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (272,978,867 samples, 0.03%)</title><rect x="760.5" y="149" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="763.51" y="159.5" ></text>
</g>
<g >
<title>memcpy@plt (121,747,747 samples, 0.01%)</title><rect x="748.7" y="117" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="751.68" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,822,367,745 samples, 0.37%)</title><rect x="1163.8" y="197" width="4.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1166.78" y="207.5" ></text>
</g>
<g >
<title>RecSplit::split (366,127,091,942 samples, 35.64%)</title><rect x="18.9" y="101" width="420.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="21.88" y="111.5" >RecSplit::split</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (153,571,766 samples, 0.01%)</title><rect x="851.0" y="165" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="854.01" y="175.5" ></text>
</g>
<g >
<title>generate_random_string[abi:cxx11] (794,988,257 samples, 0.08%)</title><rect x="11.2" y="197" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.19" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (208,687,175 samples, 0.02%)</title><rect x="734.0" y="133" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="737.00" y="143.5" ></text>
</g>
<g >
<title>time_hashing (1,011,532,966,314 samples, 98.46%)</title><rect x="13.2" y="213" width="1161.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="16.20" y="223.5" >time_hashing</text>
</g>
<g >
<title>all (1,027,362,488,448 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (656,981,626 samples, 0.06%)</title><rect x="226.9" y="85" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="229.87" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (101,727,391 samples, 0.01%)</title><rect x="759.8" y="133" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="762.77" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (766,619,039 samples, 0.07%)</title><rect x="779.1" y="133" width="0.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="782.10" y="143.5" ></text>
</g>
<g >
<title>murmur32 (2,054,138,870 samples, 0.20%)</title><rect x="1146.1" y="181" width="2.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1149.06" y="191.5" ></text>
</g>
<g >
<title>RecSplit::split (623,772,762,069 samples, 60.72%)</title><rect x="16.9" y="133" width="716.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="19.91" y="143.5" >RecSplit::split</text>
</g>
<g >
<title>malloc (272,945,513 samples, 0.03%)</title><rect x="386.1" y="85" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="389.05" y="95.5" ></text>
</g>
<g >
<title>__mcount_internal (532,582,969 samples, 0.05%)</title><rect x="733.4" y="133" width="0.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="736.36" y="143.5" ></text>
</g>
<g >
<title>std::__do_uninit_copy&lt;std::__detail::_Node_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (165,254,330 samples, 0.02%)</title><rect x="13.0" y="197" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="15.98" y="207.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (440,458,382 samples, 0.04%)</title><rect x="1163.0" y="197" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1165.97" y="207.5" ></text>
</g>
<g >
<title>operator delete@plt (528,949,812 samples, 0.05%)</title><rect x="1173.4" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.36" y="207.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,958,683,789 samples, 0.19%)</title><rect x="1170.1" y="197" width="2.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1173.15" y="207.5" ></text>
</g>
<g >
<title>__mcount_internal (528,312,475 samples, 0.05%)</title><rect x="759.9" y="149" width="0.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="762.90" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (153,571,766 samples, 0.01%)</title><rect x="851.0" y="181" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="854.01" y="191.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (506,277,472 samples, 0.05%)</title><rect x="11.5" y="181" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="14.52" y="191.5" ></text>
</g>
<g >
<title>murmur32 (8,311,974,794 samples, 0.81%)</title><rect x="748.8" y="117" width="9.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="751.82" y="127.5" ></text>
</g>
<g >
<title>memcpy@plt (95,007,472 samples, 0.01%)</title><rect x="796.1" y="149" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="799.06" y="159.5" ></text>
</g>
<g >
<title>RecSplit::split (647,371,664,582 samples, 63.01%)</title><rect x="16.3" y="149" width="743.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="19.33" y="159.5" >RecSplit::split</text>
</g>
<g >
<title>murmur32 (66,463,816,108 samples, 6.47%)</title><rect x="569.4" y="85" width="76.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="572.38" y="95.5" >murmur32</text>
</g>
<g >
<title>RecSplit::~RecSplit (134,941,912 samples, 0.01%)</title><rect x="10.4" y="213" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.40" y="223.5" ></text>
</g>
<g >
<title>RecSplit::append_to_splitting_tree (690,280,519 samples, 0.07%)</title><rect x="84.1" y="69" width="0.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="87.13" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_insert_range&lt;std::_Bit_const_iterator&gt; (90,902,468 samples, 0.01%)</title><rect x="48.0" y="69" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="50.96" y="79.5" ></text>
</g>
<g >
<title>memcpy@plt (695,744,729 samples, 0.07%)</title><rect x="387.6" y="85" width="0.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="390.55" y="95.5" ></text>
</g>
<g >
<title>find_splitting (129,362,016,311 samples, 12.59%)</title><rect x="237.5" y="85" width="148.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="240.46" y="95.5" >find_splitting</text>
</g>
<g >
<title>RecSplit::split (129,954,928,504 samples, 12.65%)</title><rect x="48.1" y="85" width="149.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="51.06" y="95.5" >RecSplit::split</text>
</g>
<g >
<title>hashing_algos (1,027,362,488,448 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >hashing_algos</text>
</g>
<g >
<title>operator new@plt (586,477,901 samples, 0.06%)</title><rect x="1149.9" y="181" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1152.93" y="191.5" ></text>
</g>
<g >
<title>__mcount_internal (32,532,860,772 samples, 3.17%)</title><rect x="84.9" y="69" width="37.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="87.93" y="79.5" >__m..</text>
</g>
<g >
<title>malloc_consolidate (211,898,082 samples, 0.02%)</title><rect x="1189.3" y="277" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.34" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (218,011,234 samples, 0.02%)</title><rect x="442.2" y="101" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="445.20" y="111.5" ></text>
</g>
<g >
<title>_mcount (1,598,821,094 samples, 0.16%)</title><rect x="780.0" y="133" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="782.98" y="143.5" ></text>
</g>
<g >
<title>calculate_fanout (96,414,043 samples, 0.01%)</title><rect x="1170.0" y="197" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1173.04" y="207.5" ></text>
</g>
<g >
<title>RecSplit::append_to_splitting_tree (152,560,380 samples, 0.01%)</title><rect x="18.7" y="101" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="21.70" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (95,008,728 samples, 0.01%)</title><rect x="733.2" y="117" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="736.24" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash_aux (302,126,226 samples, 0.03%)</title><rect x="12.6" y="165" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="15.63" y="175.5" ></text>
</g>
<g >
<title>__mcount_internal (9,566,052,085 samples, 0.93%)</title><rect x="813.1" y="149" width="11.0" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="816.13" y="159.5" ></text>
</g>
<g >
<title>find_splitting (176,956,515,969 samples, 17.22%)</title><rect x="442.5" y="101" width="203.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="445.47" y="111.5" >find_splitting</text>
</g>
<g >
<title>operator new (96,238,593 samples, 0.01%)</title><rect x="650.9" y="101" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="653.92" y="111.5" ></text>
</g>
<g >
<title>mcount@plt (1,365,988,659 samples, 0.13%)</title><rect x="134.0" y="69" width="1.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="137.00" y="79.5" ></text>
</g>
<g >
<title>_int_free (140,366,295 samples, 0.01%)</title><rect x="441.7" y="101" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="444.71" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (131,078,896 samples, 0.01%)</title><rect x="84.6" y="37" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="87.64" y="47.5" ></text>
</g>
<g >
<title>_mcount (111,045,343 samples, 0.01%)</title><rect x="798.5" y="165" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="801.54" y="175.5" ></text>
</g>
<g >
<title>_int_free (1,570,995,341 samples, 0.15%)</title><rect x="1168.2" y="197" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1171.17" y="207.5" ></text>
</g>
<g >
<title>memcpy@plt (313,073,675 samples, 0.03%)</title><rect x="828.5" y="149" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="831.50" y="159.5" ></text>
</g>
<g >
<title>_mcount (2,262,418,117 samples, 0.22%)</title><rect x="825.4" y="149" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="828.44" y="159.5" ></text>
</g>
<g >
<title>operator delete (357,321,498 samples, 0.03%)</title><rect x="1173.0" y="197" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1175.95" y="207.5" ></text>
</g>
<g >
<title>murmur32 (4,000,599,867 samples, 0.39%)</title><rect x="646.2" y="101" width="4.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="649.24" y="111.5" ></text>
</g>
<g >
<title>RecSplit::append_to_splitting_tree (631,388,339 samples, 0.06%)</title><rect x="47.3" y="85" width="0.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="50.34" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (504,559,309 samples, 0.05%)</title><rect x="746.6" y="117" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="749.62" y="127.5" ></text>
</g>
<g >
<title>RecSplit::split (551,737,485,889 samples, 53.70%)</title><rect x="17.6" y="117" width="633.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="20.61" y="127.5" >RecSplit::split</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (119,013,654 samples, 0.01%)</title><rect x="850.7" y="181" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="853.67" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (145,897,512 samples, 0.01%)</title><rect x="47.8" y="53" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="50.78" y="63.5" ></text>
</g>
<g >
<title>__mcount_internal (4,734,312,198 samples, 0.46%)</title><rect x="741.2" y="117" width="5.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="744.18" y="127.5" ></text>
</g>
<g >
<title>calculate_fanout (1,565,027,132 samples, 0.15%)</title><rect x="1139.6" y="181" width="1.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1142.55" y="191.5" ></text>
</g>
<g >
<title>memcpy@plt (1,292,191,896 samples, 0.13%)</title><rect x="567.9" y="85" width="1.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="570.89" y="95.5" ></text>
</g>
<g >
<title>malloc (3,042,941,344 samples, 0.30%)</title><rect x="1185.8" y="277" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.84" y="287.5" ></text>
</g>
<g >
<title>_mcount (5,736,350,131 samples, 0.56%)</title><rect x="322.2" y="69" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="325.15" y="79.5" ></text>
</g>
<g >
<title>generate_random_keys[abi:cxx11] (2,253,789,262 samples, 0.22%)</title><rect x="10.6" y="213" width="2.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="13.60" y="223.5" ></text>
</g>
<g >
<title>_mcount (1,085,450,503 samples, 0.11%)</title><rect x="747.2" y="117" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="750.20" y="127.5" ></text>
</g>
<g >
<title>RecSplit::build (729,543,164,516 samples, 71.01%)</title><rect x="13.3" y="197" width="837.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="16.25" y="207.5" >RecSplit::build</text>
</g>
<g >
<title>murmur32 (454,008,528 samples, 0.04%)</title><rect x="14.4" y="165" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="17.43" y="175.5" ></text>
</g>
<g >
<title>malloc (1,952,512,528 samples, 0.19%)</title><rect x="1143.1" y="181" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.10" y="191.5" ></text>
</g>
<g >
<title>golomb_rice_decode (93,766,647 samples, 0.01%)</title><rect x="1172.4" y="197" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1175.40" y="207.5" ></text>
</g>
<g >
<title>_mcount (3,233,876,847 samples, 0.31%)</title><rect x="696.2" y="101" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="699.17" y="111.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (610,135,351 samples, 0.06%)</title><rect x="440.6" y="101" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="443.62" y="111.5" ></text>
</g>
<g >
<title>murmur32 (17,371,786,689 samples, 1.69%)</title><rect x="828.9" y="149" width="19.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="831.86" y="159.5" ></text>
</g>
<g >
<title>run_recsplit_random_keys (1,014,220,083,713 samples, 98.72%)</title><rect x="10.1" y="229" width="1164.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="13.12" y="239.5" >run_recsplit_random_keys</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,269,384,612 samples, 0.22%)</title><rect x="227.6" y="85" width="2.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="230.63" y="95.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (103,008,508 samples, 0.01%)</title><rect x="439.4" y="101" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="442.42" y="111.5" ></text>
</g>
<g >
<title>__mcount_internal (99,116,947 samples, 0.01%)</title><rect x="84.4" y="37" width="0.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="87.42" y="47.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (109,756,728 samples, 0.01%)</title><rect x="652.0" y="117" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="654.99" y="127.5" ></text>
</g>
<g >
<title>RecSplit::split (727,410,480,882 samples, 70.80%)</title><rect x="15.1" y="181" width="835.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="18.12" y="191.5" >RecSplit::split</text>
</g>
<g >
<title>murmur32 (112,462,398 samples, 0.01%)</title><rect x="1172.8" y="197" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1175.82" y="207.5" ></text>
</g>
<g >
<title>__mcount_internal (6,862,268,256 samples, 0.67%)</title><rect x="771.2" y="133" width="7.9" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="774.21" y="143.5" ></text>
</g>
<g >
<title>find_splitting (20,861,477,977 samples, 2.03%)</title><rect x="734.4" y="133" width="24.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="737.40" y="143.5" >f..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,151,848,376 samples, 0.11%)</title><rect x="824.1" y="149" width="1.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="827.11" y="159.5" ></text>
</g>
<g >
<title>mcount@plt (995,102,230 samples, 0.10%)</title><rect x="328.7" y="69" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="331.74" y="79.5" ></text>
</g>
<g >
<title>[unknown] (1,014,242,393,782 samples, 98.72%)</title><rect x="10.1" y="277" width="1164.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.10" y="287.5" >[unknown]</text>
</g>
<g >
<title>find_splitting (30,494,555,979 samples, 2.97%)</title><rect x="761.0" y="149" width="35.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="763.99" y="159.5" >fi..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (222,136,686 samples, 0.02%)</title><rect x="441.3" y="101" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="444.32" y="111.5" ></text>
</g>
<g >
<title>__mcount_internal (90,931,488 samples, 0.01%)</title><rect x="47.6" y="53" width="0.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="50.58" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (5,906,552,639 samples, 0.57%)</title><rect x="1156.1" y="181" width="6.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1159.12" y="191.5" ></text>
</g>
<g >
<title>generate_all_grp (186,796,733 samples, 0.02%)</title><rect x="10.1" y="197" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="13.14" y="207.5" ></text>
</g>
<g >
<title>_mcount (110,934,284 samples, 0.01%)</title><rect x="734.3" y="133" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="737.25" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (745,653,670 samples, 0.07%)</title><rect x="12.1" y="197" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="15.12" y="207.5" ></text>
</g>
<g >
<title>golomb_rice_encode (379,925,013 samples, 0.04%)</title><rect x="47.5" y="69" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="50.51" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_insert_range&lt;std::_Bit_const_iterator&gt; (105,710,031 samples, 0.01%)</title><rect x="84.8" y="53" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="87.80" y="63.5" ></text>
</g>
<g >
<title>RecSplit::RecSplit (216,145,819 samples, 0.02%)</title><rect x="10.1" y="213" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.13" y="223.5" ></text>
</g>
<g >
<title>murmur32 (1,296,619,015 samples, 0.13%)</title><rect x="848.9" y="165" width="1.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="851.93" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (88,414,489 samples, 0.01%)</title><rect x="230.2" y="85" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="233.23" y="95.5" ></text>
</g>
<g >
<title>_int_free (6,699,324,166 samples, 0.65%)</title><rect x="1175.0" y="277" width="7.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1178.03" y="287.5" ></text>
</g>
<g >
<title>SimpleSelect::select (217,799,767,102 samples, 21.20%)</title><rect x="864.1" y="181" width="250.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="867.06" y="191.5" >SimpleSelect::select</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,978,137,897 samples, 0.19%)</title><rect x="693.9" y="101" width="2.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="696.90" y="111.5" ></text>
</g>
<g >
<title>RecSplit::split (680,816,450,694 samples, 66.27%)</title><rect x="15.7" y="165" width="782.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="18.73" y="175.5" >RecSplit::split</text>
</g>
<g >
<title>find_splitting (68,409,567,005 samples, 6.66%)</title><rect x="652.7" y="117" width="78.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="655.67" y="127.5" >find_spli..</text>
</g>
<g >
<title>__libc_start_main (1,014,220,083,713 samples, 98.72%)</title><rect x="10.1" y="261" width="1164.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.12" y="271.5" >__libc_start_main</text>
</g>
<g >
<title>_int_free (202,170,377 samples, 0.02%)</title><rect x="1134.8" y="181" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1137.83" y="191.5" ></text>
</g>
<g >
<title>mcount@plt (600,521,501 samples, 0.06%)</title><rect x="699.9" y="101" width="0.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="702.89" y="111.5" ></text>
</g>
<g >
<title>_mcount (3,909,577,808 samples, 0.38%)</title><rect x="1135.1" y="181" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.06" y="191.5" ></text>
</g>
<g >
<title>__mcount_internal (14,442,838,292 samples, 1.41%)</title><rect x="677.3" y="101" width="16.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="680.31" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (360,372,354 samples, 0.04%)</title><rect x="1174.6" y="197" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1177.61" y="207.5" ></text>
</g>
<g >
<title>mcount@plt (1,386,871,662 samples, 0.13%)</title><rect x="566.3" y="85" width="1.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="569.30" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (231,385,855 samples, 0.02%)</title><rect x="652.1" y="117" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="655.12" y="127.5" ></text>
</g>
<g >
<title>murmur32 (52,974,496,849 samples, 5.16%)</title><rect x="136.5" y="69" width="60.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="139.47" y="79.5" >murmur32</text>
</g>
<g >
<title>_int_malloc (2,711,253,783 samples, 0.26%)</title><rect x="1182.7" y="277" width="3.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1185.73" y="287.5" ></text>
</g>
<g >
<title>_mcount (247,513,726 samples, 0.02%)</title><rect x="441.9" y="101" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="444.88" y="111.5" ></text>
</g>
<g >
<title>main (1,014,220,083,713 samples, 98.72%)</title><rect x="10.1" y="245" width="1164.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.12" y="255.5" >main</text>
</g>
<g >
<title>__mcount_internal (242,261,852 samples, 0.02%)</title><rect x="11.6" y="165" width="0.3" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="14.63" y="175.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.2 (364,868,573 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1192.58" y="287.5" ></text>
</g>
<g >
<title>memcpy@plt (945,015,567 samples, 0.09%)</title><rect x="329.9" y="69" width="1.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="332.88" y="79.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (162,252,485 samples, 0.02%)</title><rect x="14.1" y="165" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="17.12" y="175.5" ></text>
</g>
<g >
<title>murmur32 (1,452,763,664 samples, 0.14%)</title><rect x="731.5" y="117" width="1.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="734.45" y="127.5" ></text>
</g>
<g >
<title>__mcount_internal (168,710,370 samples, 0.02%)</title><rect x="11.3" y="181" width="0.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="14.26" y="191.5" ></text>
</g>
<g >
<title>__mcount_internal (266,389,582 samples, 0.03%)</title><rect x="1163.5" y="197" width="0.3" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1166.48" y="207.5" ></text>
</g>
<g >
<title>malloc (233,000,935 samples, 0.02%)</title><rect x="1172.5" y="197" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.50" y="207.5" ></text>
</g>
<g >
<title>murmur32 (26,260,318,320 samples, 2.56%)</title><rect x="701.1" y="101" width="30.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="704.08" y="111.5" >mu..</text>
</g>
<g >
<title>__mcount_internal (310,994,392 samples, 0.03%)</title><rect x="13.8" y="165" width="0.3" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="16.76" y="175.5" ></text>
</g>
<g >
<title>_int_free (155,008,942 samples, 0.02%)</title><rect x="230.3" y="85" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="233.34" y="95.5" ></text>
</g>
<g >
<title>malloc (334,348,101 samples, 0.03%)</title><rect x="645.7" y="101" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="648.71" y="111.5" ></text>
</g>
<g >
<title>RecSplit::hash (271,396,393,852 samples, 26.42%)</title><rect x="851.2" y="197" width="311.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="854.18" y="207.5" >RecSplit::hash</text>
</g>
<g >
<title>RecSplit::create_buckets (1,612,752,379 samples, 0.16%)</title><rect x="13.3" y="181" width="1.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="16.27" y="191.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (275,863,749 samples, 0.03%)</title><rect x="1141.4" y="181" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1144.35" y="191.5" ></text>
</g>
<g >
<title>mcount@plt (259,427,602 samples, 0.03%)</title><rect x="781.8" y="133" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="784.81" y="143.5" ></text>
</g>
<g >
<title>golomb_rice_decode (1,247,967,150 samples, 0.12%)</title><rect x="1141.7" y="181" width="1.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1144.67" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_insert_aux (444,365,006 samples, 0.04%)</title><rect x="1174.1" y="197" width="0.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1177.10" y="207.5" ></text>
</g>
<g >
<title>__mcount_internal (498,825,098 samples, 0.05%)</title><rect x="797.7" y="165" width="0.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="800.70" y="175.5" ></text>
</g>
<g >
<title>__mcount_internal (26,474,923,301 samples, 2.58%)</title><rect x="287.3" y="69" width="30.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="290.29" y="79.5" >__..</text>
</g>
<g >
<title>murmur32 (11,922,619,277 samples, 1.16%)</title><rect x="782.3" y="133" width="13.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="785.32" y="143.5" ></text>
</g>
<g >
<title>murmur32 (47,949,160,999 samples, 4.67%)</title><rect x="331.0" y="69" width="55.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="333.97" y="79.5" >murmu..</text>
</g>
<g >
<title>_mcount (5,815,960,319 samples, 0.57%)</title><rect x="230.5" y="85" width="6.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="233.51" y="95.5" ></text>
</g>
<g >
<title>murmur32 (1,165,873,153 samples, 0.11%)</title><rect x="796.2" y="149" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="799.17" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (110,967,812 samples, 0.01%)</title><rect x="197.3" y="85" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="200.33" y="95.5" ></text>
</g>
<g >
<title>operator new (95,058,221 samples, 0.01%)</title><rect x="439.1" y="85" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="442.11" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (374,955,602 samples, 0.04%)</title><rect x="1134.3" y="181" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1137.29" y="191.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (88,329,937 samples, 0.01%)</title><rect x="12.0" y="165" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="15.00" y="175.5" ></text>
</g>
<g >
<title>__mcount_internal (36,434,752,316 samples, 3.55%)</title><rect x="509.4" y="85" width="41.8" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="512.37" y="95.5" >__m..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (116,475,422 samples, 0.01%)</title><rect x="441.6" y="101" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="444.58" y="111.5" ></text>
</g>
<g >
<title>__mcount_internal (25,596,323,964 samples, 2.49%)</title><rect x="197.5" y="85" width="29.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="200.47" y="95.5" >__..</text>
</g>
<g >
<title>find_splitting (43,653,362,730 samples, 4.25%)</title><rect x="798.7" y="165" width="50.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="801.67" y="175.5" >find_..</text>
</g>
<g >
<title>mcount@plt (1,035,560,149 samples, 0.10%)</title><rect x="386.4" y="85" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="389.36" y="95.5" ></text>
</g>
<g >
<title>murmur32 (1,050,413,866 samples, 0.10%)</title><rect x="758.5" y="133" width="1.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="761.49" y="143.5" ></text>
</g>
<g >
<title>murmur32 (44,089,306,930 samples, 4.29%)</title><rect x="388.4" y="85" width="50.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="391.40" y="95.5" >murmu..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (156,485,451 samples, 0.02%)</title><rect x="651.1" y="101" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="654.14" y="111.5" ></text>
</g>
<g >
<title>__mcount_internal (535,047,542 samples, 0.05%)</title><rect x="651.4" y="117" width="0.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="654.38" y="127.5" ></text>
</g>
<g >
<title>mcount@plt (405,369,499 samples, 0.04%)</title><rect x="828.0" y="149" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="831.04" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,830,604,987 samples, 0.28%)</title><rect x="122.3" y="69" width="3.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="125.30" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (92,000,024 samples, 0.01%)</title><rect x="15.0" y="165" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="18.01" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (95,084,644 samples, 0.01%)</title><rect x="1134.7" y="181" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.72" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_insert_aux (4,804,001,963 samples, 0.47%)</title><rect x="1150.6" y="181" width="5.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1153.60" y="191.5" ></text>
</g>
<g >
<title>memcpy@plt (184,738,196 samples, 0.02%)</title><rect x="782.1" y="133" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="785.11" y="143.5" ></text>
</g>
<g >
<title>mcount@plt (200,736,884 samples, 0.02%)</title><rect x="748.4" y="117" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="751.45" y="127.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (177,770,611 samples, 0.02%)</title><rect x="237.2" y="85" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="240.24" y="95.5" ></text>
</g>
<g >
<title>_mcount (7,344,516,372 samples, 0.71%)</title><rect x="125.6" y="69" width="8.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="128.56" y="79.5" ></text>
</g>
<g >
<title>__mcount_internal (16,624,813,449 samples, 1.62%)</title><rect x="1115.2" y="181" width="19.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1118.20" y="191.5" ></text>
</g>
<g >
<title>__mcount_internal (932,671,800 samples, 0.09%)</title><rect x="439.6" y="101" width="1.0" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="442.55" y="111.5" ></text>
</g>
<g >
<title>memcpy@plt (786,664,983 samples, 0.08%)</title><rect x="135.6" y="69" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="138.57" y="79.5" ></text>
</g>
<g >
<title>mcount@plt (516,948,531 samples, 0.05%)</title><rect x="1145.3" y="181" width="0.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1148.34" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,062,808,226 samples, 0.49%)</title><rect x="551.2" y="85" width="5.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="554.21" y="95.5" ></text>
</g>
<g >
<title>_mcount (129,752,633 samples, 0.01%)</title><rect x="760.8" y="149" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="763.83" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (119,131,711 samples, 0.01%)</title><rect x="797.6" y="149" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="800.56" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (90,903,910 samples, 0.01%)</title><rect x="439.3" y="85" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="442.30" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (222,048,050 samples, 0.02%)</title><rect x="798.3" y="165" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="801.28" y="175.5" ></text>
</g>
<g >
<title>_mcount (128,480,532 samples, 0.01%)</title><rect x="652.4" y="117" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="655.44" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (316,157,661 samples, 0.03%)</title><rect x="12.6" y="181" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="15.61" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,872,515,078 samples, 0.38%)</title><rect x="317.7" y="69" width="4.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="320.70" y="79.5" ></text>
</g>
<g >
<title>golomb_rice_encode (412,022,125 samples, 0.04%)</title><rect x="84.3" y="53" width="0.5" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="87.32" y="63.5" ></text>
</g>
<g >
<title>operator new (1,246,427,003 samples, 0.12%)</title><rect x="1148.5" y="181" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1151.50" y="191.5" ></text>
</g>
</g>
</svg>
